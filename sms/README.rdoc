= RUBY AND SMS

  Ruby Intrigue
  Lone Star Ruby Conference 2010
  Pradeep Elankumaran, Adam Bair, Brendan G. Lim

Using Ruby, we're going to learn how to build something that we can use to quickly send SMS messages.

== Why SMS?

* Usage is exploding in the states.  Many people would rather communicate this way rather than actually talking.  It's quick and it's impersonal and it's great for quickly notifying people.  

* Supported by almost all mobile phones.  If your phone doesn't support SMS then I think its time you purchase a new phone and get rid of your slap bracelet collection.

== SMS Limitations

* Not everybody has a smart phone.  Text messages should be no more than 160 characters.

* Blasting somebody with a constant stream of text messages can end up costing them an arm and a leg.  Don't do this -- unless it's actually what you intended on doing ...

== Solutions for Sending SMS

* There are several gems available that we can use for SMS delivery

* Not all of them are completely free solutions

* Clickatell is a very popular SMS gateway.  If you have an account there and don't mind paying per message sent, this is the best solution for you.  

* sms_fu is a free solution that uses e-mail to SMS as a means to deliver free messages.

== sms_fu

* sms_fu allows for free outbound SMS.  

* It's available as a gem and it's really easy to use.  Too easy.

* It relies on e-mail to SMS to deliver messages.

== Problems with sms_fu

* One of the biggest problems with SMS Fu is that you need to know your recipient's carrier.  Unlike Clickatell, you actually have to pass in the carrier name to send a text message.

* There are many supported carriers but not as much as Clickatell.

* It needs to use ActionMailer to deliver text messages.

== Wait? Free? What? How Does it Work?

Say we have a phone number we want to send a text message to.  

We know this individual's number is 555-867-5309 and that they're using AT&T judging by the nice iPhone 4 that they have that keeps on dropping calls (*ahem*).

If we've ever e-mailed ourselves using SMS we can see that a message from them will come from:

  5558675309@txt.att.net
  
We can easily break this down now.  We have the number at the front and at the end of the address 
we have the SMS e-mail address.  This very address can be used to send SMS messages to them as well.

This is how SMS Fu works.

== Installing sms_fu

  sudo gem install sms_fu 

== Dealing with Carriers

sms_fu relies on a yaml file contains a list of carriers and their e-mail SMS addresses.  

  at&t:
    name:AT&T
    value:@txt.att.net  
  t-mobile:
    name:T-Mobile
    value:@tmomail.net
  ...

Some International carriers actually make this e-mail to SMS solution a paid feature.  So, if you plan on sending text messages to anybody that's in a situation like this, make sure that they know that they might have to subscribe to an e-mail to SMS solution with their carrier.

== Reply-To/From Address

Well, since it is an e-mail, we will have to specify an e-mail address that can receive back replies.  Often, messages will appear on phones from random numbers.  Even though this is the case, if you reply back to these text messages, they will go back to the reply-to address specified in the e-mail used to deliver the outbound SMS.

  config:
    from_address:noreply@domain.com
    
By default, this is what sms_fu.yml has set for the reply-to address.  This can be modified in sms_fu.yml but can also be overridden when we deliver an SMS -- which is what I'll describe in just a minute.

== Delivering SMS Messages

Here's the exciting part.  Below is how you use sms_fu to send a basic text message.

  SMSFu.deliver(“5558675309”, “at&t”, “hello”)
  
Adding a custom from address?

  SMSFu.deliver(“5558675309”, “at&t”, “hello”, :from => “sms-replys@mydomain.com”)

Need to impost limits to make sure messages are properly truncated?

  SMSFu.deliver(“5558675309”, “at&t”, “hello”, :limit => 128)


= IT'S LAB TIME

== Lab 01 - Carriers

Let's see sms_fu in action.  First, make sure that you have sms_fu installed.  Now, bring up your favorite editor, Vim, Emacs, TextMate, Notepad, Microsoft Word (...i hope not).

To see how sms_fu actually works, we need to make sure we know how it actually creates these e-mailable addresses.

First, let's require 'rubygems' and the 'sms_fu' gem.

  require 'rubygems'
  require 'sms_fu'

Next, let's iterate over SMSFu.carriers and log out the carrier information and the e-mail that will be formed from a phone number and carrier.

  SMSFu.carriers.each do |carrier|
    puts "\n#{carrier[1]['name']} [#{carrier[0]}]"
    puts SMSFu.sms_address("123-456-7890", carrier[0])
  end

Then, let's just do a simple count on the number of carriers that sms_fu suppports.

  puts "\n#{SMSFu.carriers.count} carriers"
  
Let's save and then run it.  

You should see how these addresses are formed.  Also, uou can also see that sms_fu supports quite a large amount of carriers - US and International.  

== Lab 02 - Delivering an SMS

How about we actually deliver a quick SMS?  

First, if you don't have an e-mail address you can use, make one.  We'll also be using this e-mail address later to pull back incoming e-mails sent back via SMS.  

I know that almost all of us have Gmail addresses.  Gmail's a little finicky when it comes to SMTP.  Install the smtp-tls gem so that we can send out SMS's using our Gmail accounts.

  sudo gem install ambethia-smtp-tls -v '1.1.2' --source http://gems.github.com
  
Now that you have that setup, we can go ahead and get started writing this.

First, make sure to require rubygems and all the other necessary gems.

  require 'rubygems'
  require 'sms_fu'
  require 'smtp-tls'
  
We're then going to need to set up our ActionMailer config.  We didn't need to explicitly require 'actionmailer' since sms_fu does this already.  

Let's set our delivery method to :smtp.

  ActionMailer::Base.delivery_method = :smtp

Next, we're going to actually add in our SMTP settings. 

  ActionMailer::Base.smtp_settings = {
     :address => "smtp.gmail.com",
     :port => 587,
     :domain => "gmail.com",
     :authentication => :plain,
     :user_name => "username",  # don't put "@gmail.com"
     :password => "password",
     :enable_starttls_auto => true }

After we're done with this setup, let's setup some basic variables to store the number we're going to send an SMS, the carrier, and the message.

  number  = "123-456-7890"
  carrier = "at&t"
  message = "hello world"

Here comes the exciting part.  Let's take what we have and add in the following line to actually deliver an SMS.

  SMSFu.deliver(number,carrier,message)
  
It's up to you to choose the "victim" of your SMS.  I highly suggest using yourself so that you can actually see the results.  

Now, let's take our app, save it and run it.

== Lab 03 - Basic SMSSender Class

Now that we've sent our own basic SMS, let's turn this into its own class.  We're going to want to be able to take in three parameters from the command line.  These command-line arguments are going to be the number, carrier, and the message.  We'll also throw in some error handling in there as well as some logging.  

First, make sure to do our requires ...

  require 'rubygems'
  require 'sms_fu'
  require 'smtp-tls'

Next, grab your old config from the previous example and paste it in.

  ActionMailer::Base.delivery_method = :smtp
  ActionMailer::Base.smtp_settings = {
     :address => "smtp.gmail.com",
     :port => 587,
     :domain => "gmail.com",
     :authentication => :plain,
     :user_name => "username",  # don't put "@gmail.com"
     :password => "password",
     :enable_starttls_auto => true }

Now, let's setup a basic class definition.

  class SMSSender
    def self.send(options = {})
      new(options)
    end
  
    def initialize(options = {})
      deliver(options[:number], options[:carrier], options[:message])
    end
  end
  
We have this stub for a deliver method.  Let's create an instance method called 'deliver' that takes in three parameters: number, carrier, and message.
  
  def deliver(number, carrier, message)
    begin
      SMSFu.deliver(number,carrier,message)
      log("Delivered \"#{message}\" to #{SMSFu.sms_address(number,carrier)}")
    rescue Errno::ECONNREFUSED => e
      log("Connection refused: " + e.message)
    rescue Exception => e
      log("Exception " + e.message)
    end
  end

You see here we're calling a method called log.  This will be used for some basic logging.
  
  def log(message)
    puts "[#{Time.now.to_s}] #{message}"
  end

Alright, now outside of our SMSSender class definition, add the following at the bottom.  This will take our command-line arguments and pass them through to the class method, send.  

  SMSSender.send(
    :number => ARGV[0], 
    :carrier => ARGV[1], 
    :message => ARGV[2]
  )
  
Let's run this.  We can do this by doing.

  ruby name_of_file.rb "123-457-7890" "at&t" "hello world!"
  
== Lab 04 - SMS Fun

Cool, now we've got something legit that we can use anywhere to deliver SMS messages.  Let's make something fun.  What we want to do is make something that prompts our user for what number, carrier, and message they want to send.  We'll also take it one step further and ask them how many times they want to send this message.  Now, as a disclaimer, nobody is responsible for any damage/harm/legal action/etc that comes from this.  It's all on you buddy.  

Alright, let's grab our requires and our ActionMailer settings from the previous examples.

  require 'rubygems'
  require 'sms_fu'
  require 'smtp-tls'

  ActionMailer::Base.delivery_method = :smtp
  ActionMailer::Base.smtp_settings = {
     :address => "smtp.gmail.com",
     :port => 587,
     :domain => "gmail.com",
     :authentication => :plain,
     :user_name => "username",  # don't put "@gmail.com"
     :password => "password",
     :enable_starttls_auto => true }

Now, let's create a basic SMSSpammer class with a 'start' class method and a basic method for logging.

  class SMSSpammer
    def self.start
      new.prompt
    end
    
    def log(message)
      puts "[#{Time.now.to_s}] #{message}"
    end
  end

You can see that the start method creates a new instance of the SMSSpammer class and then calls the instance method 'prompt'.  Let's create this prompt method.

  def prompt  
    print "Phone Number: "
    number = gets.chomp
    print "Carrier (e.g, at&t): "
    carrier = gets.chomp
    print "Message: "
    message = gets.chomp
    print "Number of messages: "  # This could get dangerous
    count = gets.chomp.to_i
    puts "\n\n"

    deliver(number, carrier, message, count)
  end

This method will prompt the user for a number, carrier, message, and (gasp), the number of messages to send.  Then, it will need to call a method called deliver to actually send these messages.

Let's create this deliver method.

  def deliver(number, carrier, message, count = 1)
    begin
      count.times do 
        SMSFu.deliver(number,carrier,message)
        log("Delivered \"#{message}\" to #{SMSFu.sms_address(number,carrier)}")
      end
    rescue Errno::ECONNREFUSED => e
      log("Connection refused: " + e.message)
    rescue Exception => e
      log("Exception " + e.message)
    end
    puts "\n\n"
    prompt
  end

Now, the last thing we should do is call SMSSpammer.start outside of the class definition.

  SMSSpammer.start

Let's try it out.  It should immediately prompt the user for all the info that it needs to get the job done.  

== Lab 05 - Building an SMS / MMS Importer

We've done the whole outgoing SMS thing and that was pretty easy.  Now, we're going to try to process incoming SMS.  Processing incoming SMS that is sent from messages delivered via sms_fu is exactly like processing incoming e-mails.  Why? Well, it's the same because it *is* an e-mail.

In this lab we're going to be dealing with pulling back e-mails via IMAP and processing these items back by using MMS2R.  We're also going to be introducing a little bit of EventMachine in this lab as well.

First, let's create the base for our SMSImporter class.  

Let's create an initialize method that sets up our configuration for our IMAP settings.  

Then make a 'start' class method that creates a new instance of SMSImporter and calls the 'start' *instance* method.  Within this start instance method, let's setup EventMachine and add a periodic timer that should be executed every 10 seconds -- which will call a method called setup_imap.

  require 'rubygems'
  require 'net/imap'
  require 'tmail'
  require 'mms2r'
  require 'eventmachine'

  class SMSImporter
    def initialize
      @server   = "imap.gmail.com"
      @username = "thebrendanlim@gmail.com" # Full e-mail needed
      @password = "nu11p0int3r"
      @port     = 993
      @folder   = "INBOX"
      @ssl      = true
    end
  
    def self.start
      new.start
    end
  
    def start
      EM.run do 
        EM::add_periodic_timer(10) { 
          setup_imap
        }
      end
    end
  
    def log(message)
      puts "#{Time.now.to_s}: #{message}"
    end
  end

  command = ARGV[0] || 'start'
  SMSImporter.send(command.to_sym)

Remember, this is just essentially an e-mail importer.  Next, what we should add our 'setup_imap' method.  This will actually make a new IMAP connection and search for new e-mails.  Let's also add in some basic error handling, just in case.

  def setup_imap
    begin
      imap = Net::IMAP::new(@server, @port, @ssl)
      imap.login(@username, @password)
      imap.select(@folder)
      mail_items = imap.search(["NOT", "SEEN"])
    rescue Net::IMAP::NoResponseError => e
      log("#{e.class} - Command sent to server could not be completed successfully: #{e.message}")
      log(e.backtrace.join("\n"))
    rescue Net::IMAP::ByeResponseError => e
      log("#{e.class} - Login issues or timed out due to inactivity: #{e.message}")
      log(e.backtrace.join("\n"))
    rescue Exception => e
      log("#{e.class}: #{e.message}")
      log(e.backtrace.join("\n"))
    ensure
      imap.logout rescue log("Logout has crashed")
    end
  end
  
The next thing we should do is actually do something with this mail_items variable that we have.  Let's create a new method to check to see if there's actually anything new within here.

Underneath the 'mail_items = ....' line, let's add the following:

  check_for_new_mail(mail_items, imap)
  
Then, let's create a new method called check_for_new_mail that accepts these parameters.

  def check_for_new_mail(mail_items, imap) 
    if mail_items.empty?
      log("There are currently no e-mails to process.")
    else
      log("We've got mail!")
    end
  end

Now if we actually run this it should check our mail via IMAP and let us know if we have mail or not.

Let's take a minute to try this out.

Alright, now let's replace what we have in that else block in the check_for_new_mail method to actually process new e-mails.

  mail_items.each do |message_id|
    email = imap.fetch(message_id,'RFC822')[0].attr['RFC822']
    process_email(email, message_id, imap)
  end

Now, lastly let's create this new process_email method that we introduced.

  def process_email(email, message_id, imap)
    begin
      tmail = TMail::Mail.parse(email)
    rescue Exception => e
      log("#{e.class}: #{e.message}")
      log(e.backtrace.join("\n"))
    end
  end
  
This will return to us a basic TMail object.  The problem we have to deal with now is that almost all carriers leave their own little branding in e-mails & MMS messages.  We can remove this by using MMS2R.  MMS2R will examine the from address and depending on the carrier, remove the carrier specific branding.  What you're left is is the message that the user intended on sending you.  You can also use MMS2R to retrieve back the image that was sent in MMS messages as well.   We'll just be dealing with the text though.  

Underneath the tmail line, add the following.

  mms = MMS2R.parse(email)
  if mms.body.downcase.include?("sms")
    log("Received [#{mms.body}] from [#{tmail.from}] with number [#{mms.number}]")
    imap.store(message_id, "+FLAGS", [:Deleted])
    log("Deleted...")
    imap.expunge
  else
    log("Ignoring from [#{tmail.from}]")
  end

I'm just checking for 'sms' in the body since I don't want to purge all of your e-mails.  Change it to something more specific if you like.

Now, to run this, let's run our outgoing SMS script.  Make sure that the reply to address is the same address that's within your SMSImporter class.  Reply back to that SMS with the message 'sms'.  Then, run the SMS Importer.  If all went well, you should see the SMS Importer processing your reply.

Here's the importer in its entirety.

  require 'rubygems'
  require 'net/imap'
  require 'tmail'
  require 'mms2r'
  require 'eventmachine'

  class SMSImporter
    def initialize
      @server   = "imap.gmail.com"
      @username = "thebrendanlim@gmail.com" # Full e-mail needed
      @password = "nu11p0int3r"
      @port     = 993
      @folder   = "INBOX"
      @ssl      = true
    end
  
    def self.start
      new.start
    end
  
    def start
      EM.run do 
        EM::add_periodic_timer(10) { 
          setup_imap
        }
      end
    end
  
    def setup_imap
      begin
        imap = Net::IMAP::new(@server, @port, @ssl)
        imap.login(@username, @password)
        imap.select(@folder)
        mail_items = imap.search(["NOT", "SEEN"])
      rescue Net::IMAP::NoResponseError => e
        log("#{e.class} - Command sent to server could not be completed successfully: #{e.message}")
        log(e.backtrace.join("\n"))
      rescue Net::IMAP::ByeResponseError => e
        log("#{e.class} - Login issues or timed out due to inactivity: #{e.message}")
        log(e.backtrace.join("\n"))
      rescue Exception => e
        log("#{e.class}: #{e.message}")
        log(e.backtrace.join("\n"))
      ensure
        imap.logout rescue log("Logout has crashed")
      end
    end
  
    def check_for_new_mail(mail_items, imap) 
      if mail_items.empty?
        log("There are currently no e-mails to process.")
      else
        mail_items.each do |message_id|
          email = imap.fetch(message_id,'RFC822')[0].attr['RFC822']
          process_email(email, message_id, imap)
        end
      end
    end
  
    def process_email(email, message_id, imap)
      begin
        tmail = TMail::Mail.parse(email)
        mms = MMS2R.parse(email)

        if mms.body.downcase.include?("sms")
          log("Received [#{mms.body}] from [#{tmail.from}] with number [#{mms.number}]")
          imap.store(message_id, "+FLAGS", [:Deleted])
          log("Deleted...")
          imap.expunge
        else
          log("Ignoring from [#{tmail.from}]")
        end
      rescue Exception => e
        log("#{e.class}: #{e.message}")
        log(e.backtrace.join("\n"))
      end
    end
  
    def log(message)
      puts "#{Time.now.to_s}: #{message}"
    end
  end

  command = ARGV[0] || 'start'
  SMSImporter.send(command.to_sym)