= Building an SMS Server

  Ruby Intrigue
  Lone Star Ruby Conference 2010
  Pradeep Elankumaran, Adam Bair, Brendan G. Lim

Using Ruby, we're going to learn how to build something that we can use to quickly send SMS messages.

== Why SMS?

* Usage is exploding in the states.  Many people would rather communicate this way rather than actually talking.  It's quick and it's impersonal and it's great for quickly notifying people.  

* Supported by almost all mobile phones.  If your phone doesn't support SMS then I think its time you purchase a new phone and get rid of your slap bracelet collection.

== SMS Limitations

* Not everybody has a smart phone.  Text messages should be no more than 160 characters.

* Blasting somebody with a constant stream of text messages can end up costing them an arm and a leg.  Don't do this -- unless it's actually what you intended on doing ...

== Solutions for Sending SMS

* There are several gems available that we can use for SMS delivery

* Not all of them are completely free solutions

* Clickatell is a very popular SMS gateway.  If you have an account there and don't mind paying per message sent, this is the best solution for you.  

* sms_fu is a free solution that uses e-mail to SMS as a means to deliver free messages.

== sms_fu

* sms_fu allows for free outbound SMS.  

* It's available as a gem and it's really easy to use.  Too easy.

* It relies on e-mail to SMS to deliver messages.

== Problems with sms_fu

* One of the biggest problems with SMS Fu is that you need to know your recipient's carrier.  Unlike Clickatell, you actually have to pass in the carrier name to send a text message.

* There are many supported carriers but not as much as Clickatell.

* It needs to use ActionMailer to deliver text messages.

== Wait? Free? What? How Does it Work?

Say we have a phone number we want to send a text message to.  

We know this individual's number is 555-867-5309 and that they're using AT&T judging by the nice iPhone 4 that they have that keeps on dropping calls (*ahem*).

If we've ever e-mailed ourselves using SMS we can see that a message from them will come from:

  5558675309@txt.att.net
  
We can easily break this down now.  We have the number at the front and at the end of the address 
we have the SMS e-mail address.  This very address can be used to send SMS messages to them as well.

This is how SMS Fu works.

== Installing sms_fu

  sudo gem install sms_fu 

== Dealing with Carriers

sms_fu relies on a yaml file contains a list of carriers and their e-mail SMS addresses.  

  at&t:
    name:AT&T
    value:@txt.att.net  
  t-mobile:
    name:T-Mobile
    value:@tmomail.net
  ...

You can edit this sms_fu.yml file and add your own carriers in the same format.  SMS Fu currently supports a large list of carriers within the US and Internationally.

Some International carriers actually make this e-mail to SMS solution a paid feature.  So, if you plan on sending text messages to anybody that's in a situation like this, make sure that they know that they might have to subscribe to an e-mail to SMS solution with their carrier.

== Reply-To/From Address

Well, since it is an e-mail, we will have to specify an e-mail address that can receive back replies.  Often, messages will appear on phones from random numbers.  Even though this is the case, if you reply back to these text messages, they will go back to the reply-to address specified in the e-mail used to deliver the outbound SMS.

  config:
    from_address:noreply@domain.com
    
By default, this is what sms_fu.yml has set for the reply-to address.  This can be modified in sms_fu.yml but can also be overridden when we deliver an SMS -- which is what we'll do in a later example.

== Delivering SMS Messages

Here's the exciting part.  Below is how you use sms_fu to send a basic text message.

  SMSFu.deliver(“5558675309”, “at&t”, “hello”)
  
Adding a custom from address?

  SMSFu.deliver(“5558675309”, “at&t”, “hello”, :from => “sms-replys@mydomain.com”)

Need to impost limits to make sure messages are properly truncated?

  SMSFu.deliver(“5558675309”, “at&t”, “hello”, :limit => 128)